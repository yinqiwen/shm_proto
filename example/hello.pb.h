// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef PROTOBUF_hello_2eproto__INCLUDED
#define PROTOBUF_hello_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace helloworld {
class HelloTestData;
class HelloTestDataDefaultTypeInternal;
extern HelloTestDataDefaultTypeInternal _HelloTestData_default_instance_;
class HelloTestData_TmEntry;
class HelloTestData_TmEntryDefaultTypeInternal;
extern HelloTestData_TmEntryDefaultTypeInternal _HelloTestData_TmEntry_default_instance_;
class HelloTestItem;
class HelloTestItemDefaultTypeInternal;
extern HelloTestItemDefaultTypeInternal _HelloTestItem_default_instance_;
}  // namespace helloworld

namespace helloworld {

namespace protobuf_hello_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_hello_2eproto

// ===================================================================

class HelloTestItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:helloworld.HelloTestItem) */ {
 public:
  HelloTestItem();
  virtual ~HelloTestItem();

  HelloTestItem(const HelloTestItem& from);

  inline HelloTestItem& operator=(const HelloTestItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloTestItem(HelloTestItem&& from) noexcept
    : HelloTestItem() {
    *this = ::std::move(from);
  }

  inline HelloTestItem& operator=(HelloTestItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloTestItem& default_instance();

  static inline const HelloTestItem* internal_default_instance() {
    return reinterpret_cast<const HelloTestItem*>(
               &_HelloTestItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HelloTestItem* other);
  friend void swap(HelloTestItem& a, HelloTestItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloTestItem* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloTestItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloTestItem& from);
  void MergeFrom(const HelloTestItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloTestItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 testid = 1;
  void clear_testid();
  static const int kTestidFieldNumber = 1;
  ::google::protobuf::int64 testid() const;
  void set_testid(::google::protobuf::int64 value);

  // int64 ruleid = 2;
  void clear_ruleid();
  static const int kRuleidFieldNumber = 2;
  ::google::protobuf::int64 ruleid() const;
  void set_ruleid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:helloworld.HelloTestItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 testid_;
  ::google::protobuf::int64 ruleid_;
  mutable int _cached_size_;
  friend struct protobuf_hello_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class HelloTestData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:helloworld.HelloTestData) */ {
 public:
  HelloTestData();
  virtual ~HelloTestData();

  HelloTestData(const HelloTestData& from);

  inline HelloTestData& operator=(const HelloTestData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloTestData(HelloTestData&& from) noexcept
    : HelloTestData() {
    *this = ::std::move(from);
  }

  inline HelloTestData& operator=(HelloTestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloTestData& default_instance();

  static inline const HelloTestData* internal_default_instance() {
    return reinterpret_cast<const HelloTestData*>(
               &_HelloTestData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HelloTestData* other);
  friend void swap(HelloTestData& a, HelloTestData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloTestData* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloTestData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloTestData& from);
  void MergeFrom(const HelloTestData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloTestData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .helloworld.HelloTestItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::helloworld::HelloTestItem& items(int index) const;
  ::helloworld::HelloTestItem* mutable_items(int index);
  ::helloworld::HelloTestItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::helloworld::HelloTestItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::helloworld::HelloTestItem >&
      items() const;

  // repeated int64 k = 3;
  int k_size() const;
  void clear_k();
  static const int kKFieldNumber = 3;
  ::google::protobuf::int64 k(int index) const;
  void set_k(int index, ::google::protobuf::int64 value);
  void add_k(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      k() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_k();

  // map<int32, string> tm = 5;
  int tm_size() const;
  void clear_tm();
  static const int kTmFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
      tm() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
      mutable_tm();

  // string sv = 1;
  void clear_sv();
  static const int kSvFieldNumber = 1;
  const ::std::string& sv() const;
  void set_sv(const ::std::string& value);
  #if LANG_CXX11
  void set_sv(::std::string&& value);
  #endif
  void set_sv(const char* value);
  void set_sv(const char* value, size_t size);
  ::std::string* mutable_sv();
  ::std::string* release_sv();
  void set_allocated_sv(::std::string* sv);

  // .helloworld.HelloTestItem tk = 4;
  bool has_tk() const;
  void clear_tk();
  static const int kTkFieldNumber = 4;
  const ::helloworld::HelloTestItem& tk() const;
  ::helloworld::HelloTestItem* mutable_tk();
  ::helloworld::HelloTestItem* release_tk();
  void set_allocated_tk(::helloworld::HelloTestItem* tk);

  // @@protoc_insertion_point(class_scope:helloworld.HelloTestData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::helloworld::HelloTestItem > items_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > k_;
  mutable int _k_cached_byte_size_;
  public:
  class HelloTestData_TmEntry : public ::google::protobuf::internal::MapEntry<HelloTestData_TmEntry, 
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HelloTestData_TmEntry, 
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    HelloTestData_TmEntry();
    HelloTestData_TmEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HelloTestData_TmEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HelloTestData_TmEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      HelloTestData_TmEntry,
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tm_;
  private:
  ::google::protobuf::internal::ArenaStringPtr sv_;
  ::helloworld::HelloTestItem* tk_;
  mutable int _cached_size_;
  friend struct protobuf_hello_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloTestItem

// int64 testid = 1;
inline void HelloTestItem::clear_testid() {
  testid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HelloTestItem::testid() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloTestItem.testid)
  return testid_;
}
inline void HelloTestItem::set_testid(::google::protobuf::int64 value) {
  
  testid_ = value;
  // @@protoc_insertion_point(field_set:helloworld.HelloTestItem.testid)
}

// int64 ruleid = 2;
inline void HelloTestItem::clear_ruleid() {
  ruleid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HelloTestItem::ruleid() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloTestItem.ruleid)
  return ruleid_;
}
inline void HelloTestItem::set_ruleid(::google::protobuf::int64 value) {
  
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:helloworld.HelloTestItem.ruleid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HelloTestData

// string sv = 1;
inline void HelloTestData::clear_sv() {
  sv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloTestData::sv() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloTestData.sv)
  return sv_.GetNoArena();
}
inline void HelloTestData::set_sv(const ::std::string& value) {
  
  sv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.HelloTestData.sv)
}
#if LANG_CXX11
inline void HelloTestData::set_sv(::std::string&& value) {
  
  sv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:helloworld.HelloTestData.sv)
}
#endif
inline void HelloTestData::set_sv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.HelloTestData.sv)
}
inline void HelloTestData::set_sv(const char* value, size_t size) {
  
  sv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.HelloTestData.sv)
}
inline ::std::string* HelloTestData::mutable_sv() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.HelloTestData.sv)
  return sv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloTestData::release_sv() {
  // @@protoc_insertion_point(field_release:helloworld.HelloTestData.sv)
  
  return sv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloTestData::set_allocated_sv(::std::string* sv) {
  if (sv != NULL) {
    
  } else {
    
  }
  sv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sv);
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloTestData.sv)
}

// repeated .helloworld.HelloTestItem items = 2;
inline int HelloTestData::items_size() const {
  return items_.size();
}
inline void HelloTestData::clear_items() {
  items_.Clear();
}
inline const ::helloworld::HelloTestItem& HelloTestData::items(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloTestData.items)
  return items_.Get(index);
}
inline ::helloworld::HelloTestItem* HelloTestData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:helloworld.HelloTestData.items)
  return items_.Mutable(index);
}
inline ::helloworld::HelloTestItem* HelloTestData::add_items() {
  // @@protoc_insertion_point(field_add:helloworld.HelloTestData.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::helloworld::HelloTestItem >*
HelloTestData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloTestData.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::helloworld::HelloTestItem >&
HelloTestData::items() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloTestData.items)
  return items_;
}

// repeated int64 k = 3;
inline int HelloTestData::k_size() const {
  return k_.size();
}
inline void HelloTestData::clear_k() {
  k_.Clear();
}
inline ::google::protobuf::int64 HelloTestData::k(int index) const {
  // @@protoc_insertion_point(field_get:helloworld.HelloTestData.k)
  return k_.Get(index);
}
inline void HelloTestData::set_k(int index, ::google::protobuf::int64 value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:helloworld.HelloTestData.k)
}
inline void HelloTestData::add_k(::google::protobuf::int64 value) {
  k_.Add(value);
  // @@protoc_insertion_point(field_add:helloworld.HelloTestData.k)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HelloTestData::k() const {
  // @@protoc_insertion_point(field_list:helloworld.HelloTestData.k)
  return k_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HelloTestData::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:helloworld.HelloTestData.k)
  return &k_;
}

// .helloworld.HelloTestItem tk = 4;
inline bool HelloTestData::has_tk() const {
  return this != internal_default_instance() && tk_ != NULL;
}
inline void HelloTestData::clear_tk() {
  if (GetArenaNoVirtual() == NULL && tk_ != NULL) delete tk_;
  tk_ = NULL;
}
inline const ::helloworld::HelloTestItem& HelloTestData::tk() const {
  const ::helloworld::HelloTestItem* p = tk_;
  // @@protoc_insertion_point(field_get:helloworld.HelloTestData.tk)
  return p != NULL ? *p : *reinterpret_cast<const ::helloworld::HelloTestItem*>(
      &::helloworld::_HelloTestItem_default_instance_);
}
inline ::helloworld::HelloTestItem* HelloTestData::mutable_tk() {
  
  if (tk_ == NULL) {
    tk_ = new ::helloworld::HelloTestItem;
  }
  // @@protoc_insertion_point(field_mutable:helloworld.HelloTestData.tk)
  return tk_;
}
inline ::helloworld::HelloTestItem* HelloTestData::release_tk() {
  // @@protoc_insertion_point(field_release:helloworld.HelloTestData.tk)
  
  ::helloworld::HelloTestItem* temp = tk_;
  tk_ = NULL;
  return temp;
}
inline void HelloTestData::set_allocated_tk(::helloworld::HelloTestItem* tk) {
  delete tk_;
  tk_ = tk;
  if (tk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloTestData.tk)
}

// map<int32, string> tm = 5;
inline int HelloTestData::tm_size() const {
  return tm_.size();
}
inline void HelloTestData::clear_tm() {
  tm_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
HelloTestData::tm() const {
  // @@protoc_insertion_point(field_map:helloworld.HelloTestData.tm)
  return tm_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
HelloTestData::mutable_tm() {
  // @@protoc_insertion_point(field_mutable_map:helloworld.HelloTestData.tm)
  return tm_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace helloworld

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hello_2eproto__INCLUDED
