// Generated by the plugin protoc-gen-shmproto of protocol buffer compiler.  DO NOT EDIT!
//  source: hello.pb

#ifndef HELLO_PB_SHM_HPP_
#define HELLO_PB_SHM_HPP_
#include <iosfwd>
#include "mmdata.hpp"
#include "shm_proto_helper.hpp"
#include "hello.pb.h"
#include "shm_proto.hpp"
namespace helloworld
{
    struct ShmHelloTestItem
    {
        int64_t testid;
        int64_t ruleid;

        ShmHelloTestItem(const mmdata::CharAllocator& alloc):testid(0),ruleid(0)
        {}

        void ReadFrom(const HelloTestItem& pb) {
            shm_proto::ReadFrom(testid, pb.testid());
            shm_proto::ReadFrom(ruleid, pb.ruleid());
        }

        void WriteTo(HelloTestItem& pb)const {
            pb.set_testid(testid);
            pb.set_ruleid(ruleid);
        }

        const void* Field(const std::string& fname)const {
            if(fname == "testid") return &testid;
            if(fname == "ruleid") return &ruleid;
            return NULL;
        }

        static const char* GetTypeName() { return "helloworld.HelloTestItem"; }
        static void* New(mmdata::MMData& mm) { return mm.New<ShmHelloTestItem>(); }
        static void Destroy(mmdata::MMData& mm, void* p) { mm.Delete((ShmHelloTestItem*)p); }
        static void ReadFromPB(void* shm_data, const void* pb_data) { ((ShmHelloTestItem*)shm_data)->ReadFrom(*(const HelloTestItem*)pb_data); }
        static void WriteToPB(const void* shm_data, void* pb_data) { ((const ShmHelloTestItem*)shm_data)->WriteTo(*(HelloTestItem*)pb_data); }
        static const void* GetField(const void* shm_data, const std::string& fname) {
            return ((const ShmHelloTestItem*)shm_data)->Field(fname);
        }
    };

    inline std::ostream& operator<<(std::ostream& os, const ShmHelloTestItem& v)
    {
        os<<"[ShmHelloTestItem:";
        os<<"testid="<< v.testid;
        os<<",ruleid="<< v.ruleid;
        os<<"]";
        return os;
    }

    struct ShmHelloTestData
    {
        mmdata::SHMString sv;
        mmdata::SHMVector<ShmHelloTestItem>::Type items;
        mmdata::SHMVector<int64_t>::Type k;
        ShmHelloTestItem tk;
        mmdata::SHMMap<int32_t, mmdata::SHMString>::Type tm;

        ShmHelloTestData(const mmdata::CharAllocator& alloc):sv(alloc),items(alloc),k(alloc),tk(alloc),tm(alloc)
        {}

        void ReadFrom(const HelloTestData& pb) {
            shm_proto::ReadFrom(sv, pb.sv());
            shm_proto::ReadFrom(items, pb.items());
            shm_proto::ReadFrom(k, pb.k());
            if(pb.has_tk()){
                shm_proto::ReadFrom(tk, pb.tk());
            }
            shm_proto::ReadFrom(tm, pb.tm());
        }

        void WriteTo(HelloTestData& pb)const {
            shm_proto::WriteTo(sv, *(pb.mutable_sv()));
            shm_proto::WriteTo(items, *(pb.mutable_items()));
            shm_proto::WriteTo(k, *(pb.mutable_k()));
            shm_proto::WriteTo(tk, *(pb.mutable_tk()));
            shm_proto::WriteTo(tm, *(pb.mutable_tm()));
        }

        const void* Field(const std::string& fname)const {
            if(fname == "sv") return &sv;
            if(fname == "items") return &items;
            if(fname == "k") return &k;
            if(fname == "tk") return &tk;
            if(fname == "tm") return &tm;
            return NULL;
        }

        static const char* GetTypeName() { return "helloworld.HelloTestData"; }
        static void* New(mmdata::MMData& mm) { return mm.New<ShmHelloTestData>(); }
        static void Destroy(mmdata::MMData& mm, void* p) { mm.Delete((ShmHelloTestData*)p); }
        static void ReadFromPB(void* shm_data, const void* pb_data) { ((ShmHelloTestData*)shm_data)->ReadFrom(*(const HelloTestData*)pb_data); }
        static void WriteToPB(const void* shm_data, void* pb_data) { ((const ShmHelloTestData*)shm_data)->WriteTo(*(HelloTestData*)pb_data); }
        static const void* GetField(const void* shm_data, const std::string& fname) {
            return ((const ShmHelloTestData*)shm_data)->Field(fname);
        }
    };

    inline std::ostream& operator<<(std::ostream& os, const ShmHelloTestData& v)
    {
        os<<"[ShmHelloTestData:";
        os<<"sv="<< v.sv;
        os<<",items="<< v.items;
        os<<",k="<< v.k;
        os<<",tk="<< v.tk;
        os<<",tm="<< v.tm;
        os<<"]";
        return os;
    }

}
#endif /* HELLO_PB_SHM_HPP_ */
